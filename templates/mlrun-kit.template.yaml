AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy Iguazio MLRun Kit to EKS cluster
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - EKSClusterName
          - ClusterDomain
      - Label:
          default: Docker registry credentials
        Parameters:
          - RegistryDomainName
          - RegistrySuffix
          - RegistryUsername
          - RegistryPassword
          - RegistryEmail
    ParameterLabels:
      EKSClusterName:
        default: EKS Cluster to deploy MLRun Kit
      ClusterDomain:
        default: DNS Domain
      RegistryDomainName:
        default: Container registry URL
      RegistrySuffix:
        default: Container registry suffix
      RegistryUsername:
        default: Container registry username
      RegistryPassword:
        default: Container registry password
      RegistryEmail:
        default: Container registry user's email address
Parameters:
  EKSClusterName:
    Type: String
  ClusterDomain:
    Description: Cluster DNS name will be created in this domain
    Default: iguazio-devinteg.com
    Type: String
  RegistryDomainName:
    Description: Registry for Nuclio container images
    Default: index.docker.io
    Type: String
  RegistrySuffix:
    Type: String
    Description: Container registry suffix, for example /v1/
    Default: /v1/
  RegistryUsername:
    Type: String
  RegistryPassword:
    Type: String
    NoEcho: true
  RegistryEmail:
    Type: String
  OIDCProvider:
    Type: String
  MLrunKitVersion:
    Type: String

Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }

Resources:
  MlrunBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub mlrun-${EKSClusterName}
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
        BlockPublicAcls: yes
        BlockPublicPolicy: yes
        IgnorePublicAcls: yes
        RestrictPublicBuckets: yes

  CAARecordSet:
    Type: "AWS::Route53::RecordSet"
    DeletionPolicy: Retain
    Properties:
      Comment: "Allow AWS to auto issue certificates for the domain"
      HostedZoneName: !Sub "${ClusterDomain}."
      Name: !Sub "${ClusterDomain}."
      Type: "CAA"
      TTL: "300"
      ResourceRecords:
        - "0 issue \"amazon.com\""

  HostedZoneId:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-ResourceReader', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AwsCliCommand: !Sub
      - |
        route53 list-hosted-zones-by-name --query "HostedZones[?Name=='${ClusterDomain}.'] | [0]"
      - ClusterDomain: !Ref ClusterDomain
      IdField: 'Id'

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    DependsOn:
      - CAARecordSet
      - HostedZoneId
    Properties:
      DomainName: !Sub "*.${EKSClusterName}.${ClusterDomain}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "*.${EKSClusterName}.${ClusterDomain}"
          HostedZoneId: !Select [2, !Split [ "/", !Ref HostedZoneId ]]

  MLRunNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: mlrun
          selfLink: /api/v1/namespaces/mlrun
        spec:
          finalizers:
          - kubernetes

  RegisterUsageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EKSClusterName}-mlrun
      AssumeRolePolicyDocument: !Sub |
        {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "${OIDCProvider}:aud": "sts.amazonaws.com",
                  "${OIDCProvider}:sub": "system:serviceaccount:mlrun:mlrun-jobs-sa"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OIDCProvider}"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSMarketplaceMeteringRegisterUsage

  MlrunS3Policy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - RegisterUsageRole
    Properties:
      PolicyName: AccessS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: "s3:*"
          Effect: "Allow"
          Resource:
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MlrunBucket
                - '/*'
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MlrunBucket
      Roles:
        - !Ref RegisterUsageRole

  MarketplaceMeteringSA:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: mlrun-jobs-sa
          namespace: mlrun
          annotations:
            eks.amazonaws.com/role-arn: ${RegisterUsageRole.Arn}

  ContainerRegistrySecret:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: v1
        stringData:
          .dockercfg: |
            {"auths":
              { "https://${RegistryDomainName}${RegistrySuffix}":
                {"username": "${RegistryUsername}",
                 "password": "${RegistryPassword}",
                 "email": "${RegistryEmail}"
                }
              }
            }
        kind: Secret
        metadata:
          name: registry-credentials
          namespace: mlrun
          selfLink: /api/v1/namespaces/mlrun/secrets/registry-credentials
        type: kubernetes.io/dockercfg

  MLRunHelmChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: 
      - MLRunNamespace
      - ContainerRegistrySecret
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: mlrun-kit
      Chart: mlrun-kit
      Namespace: mlrun
      Version: !Ref MLrunKitVersion
      Repository: https://v3io.github.io/helm-charts/stable
      ValueYaml: !Sub |
        global:
          registry:
            url: "${RegistryDomainName}/${RegistryUsername}"
            secretName: registry-credentials
        nuclio:
          dashboard:
            containerBuilderKind: kaniko
        mlrun:
          api:
            extraEnv:
            - name: MLRUN_SPARK_APP_IMAGE
              value: gcr.io/iguazio/spark-app
            - name: MLRUN_SPARK_APP_IMAGE_TAG
              value: v3.2.1-mlk
            - name: MLRUN_FUNCTION__SPEC__SERVICE_ACCOUNT__DEFAULT
              value: mlrun-jobs-sa
            - name: S3_NON_ANONYMOUS
              value: "true"
            extraInitContainers:
            - name: secret-converter
              image: gcr.io/iguazio/secret-converter:0.0.1
              imagePullPolicy: IfNotPresent
          nuclio:
            uiURL: "https://nuclio.${EKSClusterName}.${ClusterDomain}"

  MLRunIngress:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: 
      - MLRunNamespace
      - ACMCertificate
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          namespace: mlrun
          name: mlrun-ingress
          annotations:
            kubernetes.io/ingress.class: alb
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
            alb.ingress.kubernetes.io/certificate-arn: ${ACMCertificate}
        spec:
          rules:
          - host: mlrun.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-ui
                    port:
                      number: 80
                path: /*
                pathType: ImplementationSpecific
          - host: mlrun-api.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-api
                    port:
                      number: 8080
                path: /*
                pathType: ImplementationSpecific
          - host: nuclio.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: nuclio-dashboard
                    port:
                      number: 8070
                path: /*
                pathType: ImplementationSpecific
          - host: jupyter.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-jupyter
                    port:
                      number: 8888
                path: /*
                pathType: ImplementationSpecific

  MLRunIngressHostname:
    Type: "AWSQS::Kubernetes::Get"
    DependsOn: MLRunIngress
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Name: ingress/mlrun-ingress
      JsonPath: "{.status.loadBalancer.ingress[0].hostname}"

  ALBRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: 
      - MLRunIngressHostname
    Properties:
      Comment: DNS record for EKS ALB
      HostedZoneName: !Sub "${ClusterDomain}."
      Name: !Sub "*.${EKSClusterName}.${ClusterDomain}."
      Type: CNAME
      TTL: "300"
      ResourceRecords:
        - !GetAtt MLRunIngressHostname.Response

Outputs:
  MLRunUI:
    Value: !Sub https://mlrun.${EKSClusterName}.${ClusterDomain}
  MLRunAPI:
    Value: !Sub https://mlrun-api.${EKSClusterName}.${ClusterDomain}
  Nuclio: 
    Value: !Sub https://nuclio.${EKSClusterName}.${ClusterDomain}
  JupyterNotebook:
    Value: !Sub https://jupyter.${EKSClusterName}.${ClusterDomain}
  KubeConfig:
    Description: Run this command in your terminal to get access to your EKS cluster
    Value: !Sub aws eks update-kubeconfig --name=${EKSClusterName}
